--------------------------- LEETCODE -----------------------------

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {
       if(root==NULL)
            return NULL;

        if(root->val==val)
            return root;

        if(root->val > val) {
            return searchBST(root->left, val);
        }
            else {
                return searchBST(root->right, val);
            }
    }
};


----------------------------------- CPP --------------------------------------------

#include <iostream>

using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

TreeNode* searchBST(TreeNode* root, int val) {
    if (root == NULL)
        return NULL;

    if (root->val == val)
        return root;

    if (root->val > val) {
        return searchBST(root->left, val);
    } else {
        return searchBST(root->right, val);
    }
}

int main() {

    TreeNode* root = new TreeNode(4);
    root->left = new TreeNode(2);
    root->right = new TreeNode(7);
    root->left->left = new TreeNode(1);
    root->left->right = new TreeNode(3);

    int value_to_search = 2;

    TreeNode* result = searchBST(root, value_to_search);

    if (result != NULL) {
        cout << "Value " << value_to_search << " found in the BST = " << result->val << endl;


        if (result->left != NULL) {
            cout << "Left child value: " << result->left->val << endl;
        } else {
            cout << "No left child." << endl;
        }

        if (result->right != NULL) {
            cout << "Right child value: " << result->right->val << endl;
        } else {
            cout << "No right child." << endl;
        }
    } else {
       cout << "Value " << value_to_search << " not found in the BST." << endl;
    }


    return 0;
}

