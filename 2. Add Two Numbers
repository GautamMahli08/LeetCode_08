------------------ LEETCODE ------------------------

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *output=new ListNode(0);
        ListNode *result=output;
        int carry=0;

        while(l1!=NULL || l2!=NULL || carry!=0) {
            if(l1!=NULL) {
                carry=carry+l1->val;
                l1=l1->next;
            }

            if(l2!=NULL) {
                carry=carry+l2->val;
                l2=l2->next;
            }

            result->next = new ListNode(carry%10);
            carry=carry/10;
            result=result->next;
        }
        return output->next;
    }
};


-------------------------- CPP ------------------------------

#include <iostream>

using namespace std;

struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(nullptr) {}
};


ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
    ListNode *output = new ListNode(0);
    ListNode *result = output;
    int carry = 0;

    while (l1 != NULL || l2 != NULL || carry != 0) {
        if (l1 != NULL) {
            carry += l1->val;
            l1 = l1->next;
        }

        if (l2 != NULL) {
            carry += l2->val;
            l2 = l2->next;
        }

        result->next = new ListNode(carry % 10);
        carry = carry / 10;
        result = result->next; 
    }
    return output->next;
}


void printList(ListNode* head) {
    ListNode* current = head;
    while (current != NULL) {
        std::cout << current->val;
        current = current->next;
        if (current != NULL) std::cout << " -> ";
    }
    std::cout << std::endl;
}

int main() {

    ListNode* l1 = new ListNode(2);
    l1->next = new ListNode(4);
    l1->next->next = new ListNode(3);
    
    ListNode* l2 = new ListNode(5);
    l2->next = new ListNode(6);
    l2->next->next = new ListNode(4);


    cout << "Number 1: ";
    printList(l1);
    cout << "Number 2: ";
    printList(l2);
    ListNode* sum = addTwoNumbers(l1, l2);
    cout << "Sum: ";
    printList(sum);

    return 0;
}

