--------------------------------------- LEETCODE -------------------------------------------

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int>output;
        if(root==NULL) 
                return output;

        queue<TreeNode*>li;
        li.push(root);

        while(!li.empty()) {
            int n=li.size();

            for(int i=0 ; i<n ; i++){
                TreeNode* current=li.front();
                li.pop();
            
            if(i==n-1){
            output.push_back(current->val);
            }
           
                if(current->left!=NULL)
                    li.push(current->left);
                if(current->right!=NULL)
                    li.push(current->right);
            }
        }
  
        return output;
    }
};


----------------------------------------------- CPP ----------------------------------------


#include <vector>
#include <queue>
#include <iostream>

using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) {}
};

   vector<int> rightSideView(TreeNode* root) {
        vector<int>output;
        if(root==NULL)
                return output;

        queue<TreeNode*>li;
        li.push(root);

        while(!li.empty()) {
            int n=li.size();

            for(int i=0 ; i<n ; i++){
                TreeNode* current=li.front();
                li.pop();

            if(i==n-1){
            output.push_back(current->val);
            }

                if(current->left!=NULL)
                    li.push(current->left);
                if(current->right!=NULL)
                    li.push(current->right);
            }
        }

        return output;
    }

int main() {

    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left=new TreeNode();
    root->left->right = new TreeNode(5);
    root->right->left = new TreeNode();
    root->right->right = new TreeNode(4);


    vector<int> result =rightSideView(root);


    for (int val : result) {
        cout << val << " ";
    }
        return 0;
}



