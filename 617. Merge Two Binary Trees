------------------------------ LEETCODE -----------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
      if(root1==0 && root2==0)
            return 0;
    if(root1==0)
        return root2;
    if(root2==0)
        return root1;

    TreeNode* retrn = new TreeNode(root1->val + root2->val);
    retrn->left=mergeTrees(root1->left,root2->left);
    retrn->right=mergeTrees(root1->right,root2->right);
    return retrn;
    }
};

--------------------------- CPP ----------------------------------


#include <iostream>

using namespace std;

  struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode() : val(0), left(nullptr), right(nullptr) {}
      TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
      TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
      if(root2==0 && root1==0)
        return 0;
    if(root1==0)
        return root2;
    if(root2==0)
        return root1;

    TreeNode* retrn = new TreeNode(root1->val + root2->val);
    retrn->left=mergeTrees(root1->left,root2->left);
    retrn->right=mergeTrees(root1->right,root2->right);
    return retrn;
    }


     void Treeoutput(TreeNode* node)
    {
        if(!node)
            return;
        cout<<node->val<<" ";
        Treeoutput(node->left);

        Treeoutput(node->right);

    }
int main()
{
  struct TreeNode* root1=new TreeNode(1);
  root1->left=new TreeNode(3);
  root1->right=new TreeNode(2);
  root1->left->left=new TreeNode(5);
  //root1->left->right=new TreeNode(4);
 // root1->right->left=new TreeNode(4);
 // root1->right->left=new TreeNode(3);

  struct TreeNode* root2=new TreeNode(2);
  root2->left=new TreeNode(1);
  root2->right=new TreeNode(3);
  root2->left->left=new TreeNode(0);
  root2->left->right=new TreeNode(4);
  root2->right->left=new TreeNode(0);
  root2->right->left=new TreeNode(7);



   TreeNode* output=mergeTrees(root1,root2);
   Treeoutput(output);

   return 0;

}



