class Solution {
public:
    bool canBeValid(string s, string locked) {
        int n_size=s.size();

        if(n_size % 2 !=0){
            return false;
        }

        int open_braces_count=0;
        int count_flexible=0;

        for(int i=0 ; i<n_size ; i++){
            if(locked[i]=='0'){
                count_flexible++;
            } else if (s[i]=='(') {
                open_braces_count++;
            } else {
                open_braces_count--;
            }  

            if(open_braces_count<0){

                if(count_flexible>0){
                    count_flexible--;
                    open_braces_count++;
                } else {
                    return false;
                }
            }
        }

        int close_braces_count=0;
       count_flexible=0;
        
        for(int i=n_size-1 ; i>=0 ; i--){
            if(locked[i]=='0'){
             count_flexible++;   
            } else if(s[i]==')'){
                close_braces_count++;
            } else {
                close_braces_count--;
            }

            if (close_braces_count<0){
                    if(count_flexible>0){
                        count_flexible--;
                        close_braces_count++;
                    } else {
                        return false;
                 }
            }
        }


        return true;
    }
};
