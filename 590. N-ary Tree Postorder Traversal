------------------------------ LEETCODE --------------------------

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    void helperr(Node* root,vector<int> &output)
    {
    if(root==NULL)
        return;
    for(auto i : root->children)
        {
            helperr(i,output);
        }
        output.push_back(root->val);
    }

     vector<int> postorder(Node* root) {
         vector<int>output;
     helperr(root,output);
     return output;
      }  
};














----------------------------- CPP --------------------------------------

#include <iostream>
#include <vector>
using namespace std;


struct Node {

    int val;
    vector<Node*> children={};
    Node() {}
    Node(int _val) {
        val = _val;
    }
    Node(int _val, vector<Node*> _children) {
    val = _val;
    children = _children;
    }
};

//--------------------------------------------------------------------------------


 int helperr(Node* root,vector<int> output)
    {
    if(root==NULL)
        return 0;
    for(auto i : root->children)
        {
            helperr(i,output);
        }
        output.push_back(root->val);
        cout<<" "<<root->val;
    }

     vector<int>postorder(Node* root) {
     vector<int>output;
     helperr(root,output);
     return output;
      }

int main()
{
   struct Node *root = new Node(1);
    (root->children).push_back(new Node(3));
    (root->children).push_back(new Node(2));
    (root->children).push_back(new Node(4));
    (root->children[0]->children).push_back(new Node(5));
    (root->children[0]->children).push_back(new Node(6));
      postorder(root);

      return 0;


}



